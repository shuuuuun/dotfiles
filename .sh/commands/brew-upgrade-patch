#!/usr/bin/env ruby

# patchバージョンのみ更新されてるものすべてをアップグレード

require "open3"
require "json"

def run_cmd(cmd, verbose: false)
  puts "*** running: #{cmd}"
  stdout, stderr, status = Open3.capture3(cmd)
  puts stdout, stderr if verbose

  exit status.exitstatus and return unless status.success?

  [stdout, stderr, status]
end

run_cmd "brew --version", verbose: true
run_cmd "brew update", verbose: true
run_cmd "brew outdated --verbose", verbose: true

outdated_json, _, _ = run_cmd "brew outdated --json"
outdated = JSON.parse(outdated_json)

def filter_formula(formula)
  return false if formula["pinned"] # pin されてるものは対象外
  return false if (formula["installed_versions"].is_a?(Array) && formula["installed_versions"].size > 1) # 複数バージョンinstallされてるものは対象外
  installed_version = formula["installed_versions"].is_a?(Array) ? formula["installed_versions"].first : formula["installed_versions"]
  current_version = formula["current_version"]
  is_same_major_minor = installed_version.split('.').slice(0, 2) == current_version.split('.').slice(0, 2) # メジャー・マイナーバージョンが同じかどうかチェック
end

formulae = outdated["formulae"].select{ filter_formula(_1) }
casks = outdated["casks"].select{ filter_formula(_1) }

puts "target formulae:\n#{formulae.join("\n")}"
formulae.each do |lib|
  puts ""
  puts "** upgrading: #{lib["name"]}, #{lib["installed_versions"]} -> #{lib["current_version"]}"
  run_cmd "brew upgrade #{lib["name"]}", verbose: true
end

puts "target casks:\n#{casks.join("\n")}"
casks.each do |lib|
  puts ""
  puts "** upgrading: #{lib["name"]}, #{lib["installed_versions"]} -> #{lib["current_version"]}"
  run_cmd "brew upgrade #{lib["name"]}", verbose: true
end
